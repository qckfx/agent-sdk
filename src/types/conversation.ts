/**
 * ConversationMessage – our wrapper around Anthropic's MessageParam that adds
 * a stable, SDK‑agnostic identifier and lightweight metadata we need for
 * bookkeeping (checkpoints, UI look‑ups, etc.).
 *
 * NOTE:  We deliberately keep the wrapper minimal.  Extra fields can be added
 * later without changing the external contract because consumer code continues
 * to access the raw Anthropic object via the `anthropic` property or via
 * `ContextWindow.getMessages()` which exposes only the Anthropic shape.
 */

import { Message } from './contextWindow.js';

export interface ConversationMessage {
  /**
   * Stable unique identifier for this message, generated by the client – not
   * by Anthropic.
   */
  id: string;

  /**
   * The underlying Anthropic message that is sent to / received from the API.
   */
  anthropic: Message;

  /**
   * Epoch‑ms timestamp indicating when we inserted the message into the
   * context window.  Used for simple latency / ordering diagnostics.  (Not
   * required by the user right now, but adding it is effectively free.)
   */
  createdAt: number;

  /**
   * The tool‑execution identifier of the most recent checkpoint *at the time
   * this message was recorded*.  This allows the runtime to restore the
   * repository to a consistent state when rolling back to any arbitrary
   * message – including those that did not themselves create a checkpoint
   * (e.g. read‑only operations).
   *
   * The value corresponds to the `toolExecutionId` that CheckpointManager tags
   * as `chkpt/<toolExecutionId>` in the session‑scoped shadow git repository.
   * It may be `undefined` if no checkpoint has been created yet.
   */
  lastCheckpointId?: string;
}
